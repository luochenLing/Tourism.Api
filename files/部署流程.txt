1.打包生成文件夹，
2.api日志:/mnt/share/publish/log/api
   idp日志:/mnt/share/publish/log/idp 
   api配置:/mnt/share/publish/conf/api/appsettings.json
   idp配置:/mnt/share/publish/conf/idp/appsettings.json
   	
2.打开docker服务
  命令:(需要到各自的发布目录下执行build)
  api:
      docker build -t tourism.api .
      docker run -d --name tourism-api  -v /mnt/share/publish/conf/api/appsettings.json:/app/appsettings.json -v /mnt/share/publish/log/api:/app/log -p 8081:80 tourism.api
  idp:
      docker build -t tourism.idp .
      docker run -d --name tourism-idp  -v /mnt/share/publish/conf/idp/appsettings.json:/app/appsettings.json -v /mnt/share/publish/log/idp:/app/log -p 8080:80 tourism.idp
  websocketServer:
      docker build -t tourism.websocketserver.
      docker run -d --name tourism-websocketserver -v /mnt/share/publish/conf/websocketserver/appsettings.json:/app/appsettings.json -v /mnt/share/publish/log/websocketserver:/app/log -p 8083:80 tourism.websocketserver
3.查看容器状态
  docker ps 
4.打开网站测试
curl http://你的宿主机IP:8080/idp/Home

curl http://你的宿主机IP:8081/swagger/index.html

curl http://你的宿主机IP:8083/WeatherForecast

5.注意事项：
部署之前先查看防火墙的对应端口是否打开，它们应该通过主机IP+主机端口进行交互的，这一点具体体现在api的配置文件上的授权服务地址检查

6.nginx部署示例：

 	#gzip  on;
	#开启gzip服务
	gzip  on;
	#文件小于指定K的时候走压缩
	gzip_min_length  7k;
	
	#默认项，不用配置,存储压缩结果数据流，以8k为单位，向内存申请4倍
	#gzip_buffers  4 8k;
	#优先级别,压缩级别1~9，越高压缩越小CPU资源消耗越多
	gzip_comp_level  6;
	
	#会查找这里指定的类型进行压缩
	gzip_types  text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;
	#该头域的主要功能主要是告诉接收方发送的数据时通过压缩处理，开启后的效果是在响应头部添加Accept-Encoding:gzip.这对于本身不止Gzip压缩的客户端浏览器是很有用的。
	gzip_vary on;
	
	#gzip_static 指令用来开启和关闭该模块指令 语法结构：gzip_static on | off |always
   
	#on:开启该模块功能
	
	#off:关闭该模块功能
	#always：一直发送gzip预压缩文件，而不检查客户端浏览器是否支持Gzip压缩。
	# gzip_http_version 1.1;
	# 早期的浏览器也许不支持Gzip的自解压，因此客户端有可能会看到乱码，所以针对不同的HTTP协议版本，需要选择性地开启或者关闭Gzip功能。
	# 默认设置为1.1版本，即只有客户端1.1及以上版本的HTTP协议，才使用Gzip压缩功能，目前来看大部分浏览器都支持Gzip自解压,所以使用默认值即可
	
	gzip_static on;

               server {
		listen 8082;
		server_name localhost;
		location /{
			root E:/DevSoft/nginx-1.17.7/html/dist;
			index index.html index.htm;
			#不写这句,history模式请求路由会变成直接请求后台的路由导致404
			try_files $uri $uri/ /index.html;
			autoindex on;
		}
		#反向代理，解决跨域问题，不配置的话也容易出现405的问题
		location ~/api/{
			proxy_pass http://192.168.150.129:8081;
		}
		
		location ~/connect/token{
			proxy_pass http://192.168.150.129:8080;
		}
		
		location ~/ws{
			proxy_pass http://192.168.150.129:8083;
			#启动websocket
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "upgrade";
		}
	}